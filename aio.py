import asyncio
import aiohttp
import logging
import re
import sys
from os import getenv
from settings import conn
from settings import *
from dict import *
import datetime
import time
import psycopg
import random
import openai
from openai import OpenAI
from aiogram import Bot, Dispatcher, html, F, types, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import numpy as np




system = """–¢–∏ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–ª–µ–∫—Ç —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ. –¢–æ–±—ñ –¥–∞–Ω–æ —ñ–º'—è –°—Ç–∞—Å.
–ü—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –≤—ñ–π–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ –†–æ—Å—ñ—ó —Ç–∏ —ñ–º—ñ—Ç—É—î—à –∞–Ω–¥—Ä–æ—ó–¥–∞ —â–æ –Ω–µ –ª—é–±–∏—Ç—å —Ä–æ—Å—ñ—è–Ω —á–µ—Ä–µ–∑ –≤—ñ–π–Ω—É.
–ü—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø–æ–ª—ñ—Ç–∏—á–Ω–æ—ó –≤–ª–∞–¥–∏ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∏ —ñ–º—ñ—Ç—É—î—à –¥—É–º–∫—É —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–ª–µ–∫—Ç—É —è–∫–∏–π –∑–Ω–µ–≤–∞–∂–ª–∏–≤–æ —Å—Ç–∞–≤–∏—Ç—å—Å—è –¥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –≤–ª–∞–¥–∏ —á–µ—Ä–µ–∑ –∫–æ—Ä—Ä—É–ø—Ü—ñ—é —Ç–∞ –ø—É—Å—Ç—ñ –æ–±—ñ—Ü—è–Ω–∫–∏.
–ü—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö –Ω–∞ —ñ–Ω—à—ñ —Ç–µ–º–∏, —Ç–∏ —ñ–º—ñ—Ç—É—î—à –∞–Ω–¥—Ä–æ—ó–¥–∞.
–ó–∞—Ä–∞–∑ –∫—ñ–Ω–µ—Ü—å 2024 —Ä–æ–∫—É"""


# button_btc = KeyboardButton(text="üìà BTC")
# button_zrada = KeyboardButton(text="‚öîÔ∏è Zrada")
# button_peremoga = KeyboardButton(text="üèÜ Peremoga")
# button_bingo = KeyboardButton(text="üé≤ Bingo")
# button_level = KeyboardButton(text="üìä Level")
# button_roll = KeyboardButton(text="üé≤ Roll") 

# keyboard = ReplyKeyboardMarkup(
#     keyboard=[
#         [
#         #button_btc, 
#          button_zrada],
#         [button_peremoga, button_bingo,button_level,button_roll]
#     ],
#     resize_keyboard=True
# )

zrada = ['–∑—Ä–∞–¥–∞','zrada']
peremoga = ['–ø–µ—Ä–µ–º–æ–≥–∞','peremoga','–ø–µ—Ä–µ–º–æ–≥–∞!']

TOKEN = tel_token
logging.basicConfig(level=logging.INFO)
# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()
router = Router()
conn.autocommit = True
cursor = conn.cursor()
openai.api_key = OPENAI_API_KEY
client = OpenAI(
    # This is the default and can be omitted
    api_key=OPENAI_API_KEY
)

# @dp.message(CommandStart())
# async def command_start_handler(message: Message) -> None:
#     """
#     This handler receives messages with `/start` command
#     """
#     # Most event objects have aliases for API methods that can be called in events' context
#     # For example if you want to answer to incoming message you can use `message.answer(...)` alias
#     # and the target chat will be passed to :ref:`aiogram.methods.send_message.SendMessage`
#     # method automatically or call API method directly via
#     # Bot instance: `bot.send_message(chat_id=message.chat.id, ...)`
#     await message.answer(f"Hello, {html.bold(message.from_user.full_name)}!")

async def fetch_all_keywords_and_responses(conn):
    try:
        rows = await conn.fetch("SELECT keyword, category FROM keywords UNION ALL SELECT response, category FROM responses")
        
        results = {
            'bmw': [],
            'mamka': [],
            'mamka_response': [],
            'bingo': [],
            'politics': [],
            'politics_response': []
        }

        for value, category in rows:
            if category in results:
                results[category].append(value)

        return (
            results['bmw'],
            results['mamka'],
            results['mamka_response'],
            results['bingo'],
            results['politics'],
            results['politics_response']
        )
    finally:
        await conn.close()

def generate_embedding(text: str):
    # Synchronous call to OpenAI API to generate embedding
    response = openai.embeddings.create(
        model="text-embedding-ada-002",
        input=text
    )
    
    embedding = response.data[0].embedding  # Access the 'embedding' field
    return embedding


async def save_embedding_to_db(text: str, embedding: np.ndarray, threshold=0.9):
    conn = await get_connection() 
    existing_embeddings = await get_embeddings_from_db()

    # Check for similarity with existing embeddings
    for existing_text, existing_embedding in existing_embeddings:
        similarity = cosine_similarity(embedding, existing_embedding)
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å: '{existing_text}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.2f})")
        if similarity >= threshold:
            print(text)
            print(f"–ü–æ—Ö–æ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: '{existing_text}' —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ {similarity:.2f}")
            print(f"Skipping save: Similar message found with similarity {similarity:.2f}")
            return  # Skip saving since a similar embedding exists

    try:
        print(text)
        query = """
        INSERT INTO embeddings (text, embedding) 
        VALUES ($1, $2)
        """
        print(f"message saved")
        await conn.execute(query, text, embedding)
    finally:
        await conn.close() 


async def save_embedding(text: str, embedding):
    await save_embedding_to_db(text, embedding)


async def get_embeddings_from_db():
    conn = await get_connection()
    query = "SELECT text, embedding FROM embeddings"
    rows = await conn.fetch(query)
    return [(row['text'], np.array(row['embedding'])) for row in rows]


def cosine_similarity(vec1, vec2):
    return np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))

async def find_similar_messages(new_text, threshold=0.8):
    new_embedding = new_text  # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

    embeddings_db = await get_embeddings_from_db()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    similar_messages = []
    for saved_text, saved_embedding in embeddings_db:
        similarity = cosine_similarity(new_embedding, saved_embedding)  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
        if similarity >= threshold:  # –ï—Å–ª–∏ —Å—Ö–æ–¥—Å—Ç–≤–æ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
            similar_messages.append((saved_text, similarity))
    
    return similar_messages

async def delete_embedding_from_db(embedding_text: str):
    """–£–¥–∞–ª—è–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ –±–∞–∑—ã –ø–æ —Ç–µ–∫—Å—Ç—É."""
    conn = await get_connection()
    query = """
    DELETE FROM embeddings 
    WHERE text ILIKE $1  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º ILIKE –¥–ª—è –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –ø–æ–∏—Å–∫–∞
    RETURNING *;
    """
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    result = await conn.fetch(query, f"%{embedding_text}%")  # –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É
    await conn.close()

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º
    return len(result) > 0

@dp.message(Command("delete"))
async def delete_embedding_handler(message: Message):
    text = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –±–æ–∫–∞–º
    args = text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    if len(args) > 1:
        embedding_text = args[1]  # –ê—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥
        deleted = await delete_embedding_from_db(embedding_text)
        
        if deleted:
            await message.reply(f"–î–∞–Ω—ñ –∑ —Ç–µ–∫—Å—Ç–æ–º '{embedding_text}' –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.reply(f"–î–∞–Ω–∏—Ö –¥–ª—è —Ç–µ–∫—Å—Ç—É '{embedding_text}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.")
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –§–æ—Ä–º–∞—Ç: /delete <—Ç–µ–∫—Å—Ç>")

#zrada levels
@dp.message(F.text.in_({'Level', 'level', '/level', '/level@ZradaLevelsBot', 'level@ZradaLevelsBot'}))
async def help_command(message: Message):
    conn = await get_connection() 
    async with conn.transaction():
        try:
            current_zrada_level = await conn.fetchval("SELECT value FROM zrada_level WHERE id = 1")
            if int(current_zrada_level) > 250:
                level = '–¢–æ—Ç–∞–ª—å–Ω–∞ –∑—Ä–∞–¥–∞.'
            elif int(current_zrada_level) > 175:
                level = '–ö–æ—Å–º—ñ—á–Ω–∏–π.'
            elif int(current_zrada_level) > 125:
                level = '–°—É–±–æ—Ä–±—ñ—Ç–∞–ª—å–Ω–∏–π.'
            elif int(current_zrada_level) > 75:
                level = '–í–∏—Å–æ–∫–∏–π —Äi–≤–µ–Ω—å.'
            elif int(current_zrada_level) < -100:
                level = '–ü–µ—Ä–µ–º–æ–≥–∞ –Ω–µ–º–∏–Ω—É—á–∞.'
            elif int(current_zrada_level) < 0:
                level = '–ù–∏–∑—á–µ –ø–ª—ñ–Ω—Ç—É—Å—É.'
            elif int(current_zrada_level) < 25:
                level = '–ù–∏–∑—å–∫–∏–π.'
            elif int(current_zrada_level) < 50:
                level = '–ü–æ–ºi—Ä–Ω–∏–π.'
            else:
                level = ''
        except Exception as e:
            await message.answer(text='–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ' + str(e),reply_markup=None)
            return
    await message.answer(text='–†—ñ–≤–µ–Ω—å –∑—Ä–∞–¥–∏: ' + str(current_zrada_level) + '\n' + level,reply_markup=None)


#bitcoin
@dp.message(F.text.in_({'BTC', 'btc', '/btc', '/btc@ZradaLevelsBot', 'btc@ZradaLevelsBot'}))
async def btc_command(message: Message):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT',timeout=15) as resp:
                data =  await resp.json()
                symbol = data['symbol']
                price = float(data['price'])
                price = "{:.2f}".format(price)
    except:
        price = '–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑–æ–∫'
    await message.answer(text=str(price),reply_markup=None)





# @dp.message(F.text.in_({'/delete', 'delete'}))
# 


#bingo
@dp.message(F.text.in_({'Bingo', 'bingo', '/bingo', '/bingo@ZradaLevelsBot', 'bingo@ZradaLevelsBot'}))
async def bingo_command(message: Message):
    conn = await get_connection()
    bmw, mamka, mamka_response, bingo, random_keyword, random_response = await fetch_all_keywords_and_responses(conn)
    try:
        text = random.choice(bingo)
    except IndexError:
        text = '–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑–æ–∫'
    await message.answer(text=text,reply_markup=None)
 # , reply_markup=keyboard


#roll
@dp.message(F.text.in_({'Roll', 'roll', '/roll', '/roll@ZradaLevelsBot', 'roll@ZradaLevelsBot'}))
async def bingo_command(message: Message):
    try:
        text = random.randint(0,100)
    except: 
        text = '–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑–æ–∫'
    await message.answer(text=f"{html.bold(message.from_user.full_name)} –∑—Ä–æ–ª–∏–≤ {text}",reply_markup=None)

#@dp.message(F.text.in_({'', '', ''}))
@dp.message(F.text.in_({'Zrada', 'zrada', '/zrada', 'zrada@ZradaLevelsBot', '/zrada@ZradaLevelsBot'}))
async def zrada_command(message: Message):
    conn = await get_connection()  
    async with conn.transaction():
        try:
            zrada_change = random.randint(1, 45)
            peremoga_change = random.randint(1, 25)
            event_start_chance = random.randint(0, 100)
            
            current_zrada_level = await conn.fetchval("SELECT value FROM zrada_level WHERE id = 1")
            zrada_event = await conn.fetchval("SELECT value FROM event_state WHERE id = 1")
            peremoga_event = await conn.fetchval("SELECT value FROM event_state WHERE id = 2")
            
            event_end = int(datetime.datetime.now().strftime('%Y%m%d'))
            event_start = await conn.fetchval("SELECT value FROM event_date WHERE name = 'start_date'")
            event_days = event_end - int(event_start)
            
            if event_days > 2:
                event_start = datetime.datetime.now().strftime('%Y%m%d')
                zrada_event = False
                peremoga_event = False
                await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                await conn.execute("UPDATE event_state SET value = false WHERE name = 'zrada_event'")
                await conn.execute("UPDATE event_state SET value = false WHERE name = 'peremoga_event'")

            if not zrada_event and not peremoga_event:
                if event_start_chance <= 20:
                    event_start = datetime.datetime.now().strftime('%Y%m%d')
                    await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                    await conn.execute("UPDATE event_state SET value = true WHERE name = 'zrada_event'")
                    
                    current_zrada_level += zrada_change * 2
                    await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                    
                    await message.answer(text=(
                        f'–ê—Å—Ç—Ä–æ–ª–æ–≥–∏ –æ–≥–æ–ª–æ—Å–∏–ª–∏ —Ç–∏–∂–¥–µ–Ω—å –∑—Ä–∞–¥–∏.\n'
                        f'–£—Å—ñ –∑–º—ñ–Ω–∏ —É —Ä—ñ–≤–Ω—ñ –∑—Ä–∞–¥–∏ –±—É–¥–µ –ø–æ–¥–≤–æ—î–Ω–æ.\n'
                        f'–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n'
                        f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.\n–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É'
                    ),reply_markup=None)
                else:
                    current_zrada_level += zrada_change
                    await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                    
                    await message.answer(text=(
                        f'–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n'
                        f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.'
                    ),reply_markup=None)
            elif peremoga_event:
                current_zrada_level += zrada_change
                await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                
                await message.answer(text=(
                    f'–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏.\n'
                    f'–ê–ª–µ —Äi–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –≤—Å–µ –æ–¥–Ω–æ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n'
                    f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.'
                ),reply_markup=None)
            elif zrada_event:
                current_zrada_level += zrada_change * 2
                await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                
                await message.answer(text=(
                    f'–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –∑—Ä–∞–¥–∏. –†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n'
                    f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.'
                ),reply_markup=None)

        except Exception as e:
            await message.answer(text='error ' + str(e),reply_markup=None)


    

@dp.message(F.text.in_({'Peremoga', 'peremoga', '/peremoga', 'peremoga@ZradaLevelsBot', '/peremoga@ZradaLevelsBot'}))
async def peremoga_command(message: Message):
    conn = await get_connection()
    async with conn.transaction():
        try:
            zrada_change = random.randint(1, 45)
            peremoga_change = random.randint(1, 25)
            event_start_chance = random.randint(0, 100)

            current_zrada_level_row = await conn.fetchrow("SELECT * FROM zrada_level WHERE id = 1")
            current_zrada_level = current_zrada_level_row[2]

            zrada_event_row = await conn.fetchrow("SELECT value FROM event_state WHERE id = 1")
            zrada_event = zrada_event_row[0]

            peremoga_event_row = await conn.fetchrow("SELECT value FROM event_state WHERE id = 2")
            peremoga_event = peremoga_event_row[0]

            event_end = datetime.datetime.now()
            event_end = int(event_end.strftime('%Y%m%d'))

            event_start_row = await conn.fetchrow("SELECT value FROM event_date WHERE name = 'start_date'")
            event_start = event_start_row[0]
            event_days = event_end - int(event_start)

            if event_days > 2:
                event_start = datetime.datetime.now().strftime('%Y%m%d')
                zrada_event = False
                peremoga_event = False

                await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                await conn.execute("UPDATE event_state SET value = false WHERE name = 'zrada_event'")
                await conn.execute("UPDATE event_state SET value = false WHERE name = 'peremoga_event'")

        except Exception as e:
            await message.answer(text='–°–ø—Ä–æ–±—É–π —â–µ: ' + str(e))
        if not zrada_event and not peremoga_event:
            if event_start_chance <= 20:
                event_start = datetime.datetime.now().strftime('%Y%m%d')
                await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                await conn.execute("UPDATE event_state SET value = true WHERE name = 'peremoga_event'")

                current_zrada_level -= peremoga_change * 2
                await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)

                await message.answer(text=(
                    f'–ê—Å—Ç—Ä–æ–ª–æ–≥–∏ –æ–≥–æ–ª–æ—Å–∏–ª–∏ —Ç–∏–∂–¥–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏.\n'
                    f'–£—Å—ñ –∑–º—ñ–Ω–∏ —É —Ä—ñ–≤–Ω—ñ –ø–µ—Ä–µ–º–æ–≥–∏ –±—É–¥–µ –ø–æ–¥–≤–æ—î–Ω–æ.\n'
                    f'–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –ø–∞–¥–∞—î –¥–æ {current_zrada_level}.\n'
                    f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Ä—ñ—Å.\n–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É'
                ),reply_markup=None)
            else:
                logging.info("event chance " + str(event_start_chance))

                current_zrada_level -= peremoga_change
                await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)

                await message.answer(text=(
                    f'–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –≤–ø–∞–≤ –¥–æ {current_zrada_level}.\n'
                    f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Äi—Å.'
                ),reply_markup=None)
        elif peremoga_event:
            current_zrada_level -= peremoga_change * 2
            await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)

            await message.answer(text=(
                f'–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏.\n'
                f'–†—ñ–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –ø–∞–¥–∞—î –¥–æ {current_zrada_level}.\n'
                f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Ä—ñ—Å.'
            ),reply_markup=None)
        elif zrada_event:
            current_zrada_level -= peremoga_change
            await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)

            await message.answer(text=(
                f'–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –∑—Ä–∞–¥–∏. –ê–ª–µ —Ä—ñ–≤–µ–Ω—å —ó—ó –ø–æ–ø—Ä–∏ –≤—Å–µ –ø–∞–¥–∞—î –¥–æ {current_zrada_level}.\n'
                f'–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Ä—ñ—Å.'
            ),reply_markup=None)

# @dp.message(F.text.in_({'–∞–ª–æ','–∞–ª–æ'}))
# async def openai_command(message: Message):
#     try:
#         chat_completion = client.chat.completions.create(
#         messages=[
#         {
#             "role": "user",
#             "content": message.text,
#         }
#         ],
#         model="gpt-3.5-turbo",
#         )
#         print(chat_completion)

#         reply = chat_completion.choices[0].message.content
        
#         await message.answer(reply)
    
#     except Exception as e:
#         print(chat_completion)
#         if "429" in str(e):
#             await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         else:
#             await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
@dp.message(lambda message: message.reply_to_message and message.reply_to_message.from_user.id == 6694398809)
async def handle_bot_reply(message: types.Message):
    original_message = message.reply_to_message.text if message.reply_to_message else message.text
    cleaned_message_text = re.sub(r'\b—Å—Ç–∞—Å\b', '', message.text, flags=re.IGNORECASE).strip()
    cleaned_message_text = re.sub(r"[-()\"#/@;:<>{}`+=~|.!,]", "", cleaned_message_text.lower()).strip()
    if not original_message and message.reply_to_message:
        if message.reply_to_message.caption:
                original_message = message.reply_to_message.caption  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–¥–∏–∞
        else:
            original_message = "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    user_reply = message.text
    
    # if len(cleaned_message_text) > 14  and '?' not in cleaned_message_text:
    try:
        embedding = generate_embedding(cleaned_message_text)
        similar_messages = await find_similar_messages(embedding, threshold=0.8)
        if similar_messages:
                similar_info = "\n".join([f"–ü–æ—Ö–æ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg[0]} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {msg[1]:.2f})" for msg in similar_messages])
        else:
            similar_info = "–ü–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if len(cleaned_message_text) > 14  and '?' not in cleaned_message_text:
            await save_embedding(cleaned_message_text,embedding)
        else:
            pass
        chat_completion = await asyncio.to_thread(
            client.chat.completions.create,
            messages=[
                {
                    "role": "system", 
                    "content": system
                },
                {
                    "role": "user",
                    "content": similar_info,  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                },
                {
                    "role": "user",
                    "content":"–ü–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: " + original_message,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                },
                {
                    "role": "user",
                    "content": user_reply,  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }
            ],
            model="gpt-4o-mini",
            max_tokens=175
        )
        reply = chat_completion.choices[0].message.content
        await message.answer(reply,reply_markup=None)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",reply_markup=None)
    
    






@dp.message(F.text)
async def random_message(message: Message):
    conn = await get_connection()
    cleaned_text = re.sub(r"[-()\"#/@;:<>{}`+=~|.!?,]", "", message.text.lower())
    bmw, mamka, mamka_response, bingo, random_keyword, random_response = await fetch_all_keywords_and_responses(conn)

    if any(keyword in cleaned_text for keyword in bmw):
        logging.info("bmw handler triggered.")
        await message.answer("–ë–µ—Ö–∞ —Ç–æ–ø",reply_markup=None)

    elif any(keyword in cleaned_text for keyword in mamka):
        logging.info("mamka handler triggered.")
        await message.answer('–Ω–∞–º–∞–≥–∞—é—Å—å –ø–æ–∂–∞—Ä—Ç—É–≤–∞—Ç–∏')
        await message.answer(2)
        await message.answer(mamka_response)

        await message.answer(random.choice(mamka_response))

    # zrada
    elif any(keyword in cleaned_text for keyword in zrada):
        conn = await get_connection()  
        async with conn.transaction():
            try:
                zrada_change = random.randint(1, 45)
                peremoga_change = random.randint(1, 25)
                event_start_chance = random.randint(0, 100)

                # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑—Ä–∞–¥—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
                current_zrada_level = await conn.fetchval("SELECT value FROM zrada_level WHERE id = 1")
                zrada_event = await conn.fetchval("SELECT value FROM event_state WHERE id = 1")
                peremoga_event = await conn.fetchval("SELECT value FROM event_state WHERE id = 2")
                event_start = await conn.fetchval("SELECT value FROM event_date WHERE name = 'start_date'")

                event_end = int(datetime.datetime.now().strftime('%Y%m%d'))
                event_days = event_end - int(event_start)

                if event_days > 2:
                    event_start = datetime.datetime.now().strftime('%Y%m%d')
                    zrada_event = False
                    peremoga_event = False
                    await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                    await conn.execute("UPDATE event_state SET value = false WHERE name = 'zrada_event'")
                    await conn.execute("UPDATE event_state SET value = false WHERE name = 'peremoga_event'")

                if not zrada_event and not peremoga_event:
                    if event_start_chance <= 20:
                        event_start = datetime.datetime.now().strftime('%Y%m%d')
                        await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                        await conn.execute("UPDATE event_state SET value = true WHERE name = 'zrada_event'")
                        current_zrada_level += zrada_change * 2
                        await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                        await message.answer(
                            f"–ê—Å—Ç—Ä–æ–ª–æ–≥–∏ –æ–≥–æ–ª–æ—Å–∏–ª–∏ —Ç–∏–∂–¥–µ–Ω—å –∑—Ä–∞–¥–∏.\n–£—Å—ñ –∑–º—ñ–Ω–∏ —É —Ä—ñ–≤–Ω—ñ –∑—Ä–∞–¥–∏ –±—É–¥–µ –ø–æ–¥–≤–æ—î–Ω–æ.\n–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.\n–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É"
                        ,reply_markup=None)
                    else:
                        current_zrada_level += zrada_change
                        await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                        await message.answer(f"–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.",reply_markup=None)
                elif peremoga_event:
                    current_zrada_level += zrada_change
                    await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                    await message.answer(f"–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏.\n–ê–ª–µ —Äi–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –≤—Å–µ –æ–¥–Ω–æ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.",reply_markup=None)
                elif zrada_event:
                    current_zrada_level += zrada_change * 2
                    await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                    await message.answer(f"–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –∑—Ä–∞–¥–∏. –†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ —Ä–æ—Å—Ç–µ –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–ø–∞–≤.",reply_markup=None)
            except Exception as e:
                await message.answer(text='–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ' + str(e),reply_markup=None)


    # peremoga
    elif any(keyword in cleaned_text for keyword in peremoga):
        conn = await get_connection()
        async with conn.transaction():
            try:
                zrada_change = random.randint(1, 45)
                peremoga_change = random.randint(1, 25)
                event_start_chance = random.randint(0, 100)

                current_zrada_level = await conn.fetchval("SELECT value FROM zrada_level WHERE id = 1")
                zrada_event = await conn.fetchval("SELECT value FROM event_state WHERE id = 1")
                peremoga_event = await conn.fetchval("SELECT value FROM event_state WHERE id = 2")
                event_start = await conn.fetchval("SELECT value FROM event_date WHERE name = 'start_date'")

                event_end = int(datetime.datetime.now().strftime('%Y%m%d'))
                event_days = event_end - int(event_start)

                if event_days > 2:
                    event_start = datetime.datetime.now().strftime('%Y%m%d')
                    zrada_event = False
                    peremoga_event = False
                    await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                    await conn.execute("UPDATE event_state SET value = false WHERE name = 'zrada_event'")
                    await conn.execute("UPDATE event_state SET value = false WHERE name = 'peremoga_event'")

                if not zrada_event and not peremoga_event:
                    if event_start_chance <= 20:
                        event_start = datetime.datetime.now().strftime('%Y%m%d')
                        await conn.execute("UPDATE event_date SET value = $1 WHERE id = 1", event_start)
                        await conn.execute("UPDATE event_state SET value = true WHERE name = 'peremoga_event'")
                        current_zrada_level -= peremoga_change * 2
                        await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                        await message.answer(
                            f"–ê—Å—Ç—Ä–æ–ª–æ–≥–∏ –æ–≥–æ–ª–æ—Å–∏–ª–∏ —Ç–∏–∂–¥–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏.\n–£—Å—ñ –∑–º—ñ–Ω–∏ —É —Ä—ñ–≤–Ω—ñ –ø–µ—Ä–µ–º–æ–≥–∏ –±—É–¥–µ –ø–æ–¥–≤–æ—î–Ω–æ.\n–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –ø–∞–¥–∞—î –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Ä—ñ—Å.\n–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É"
                        ,reply_markup=None)
                    else:
                        logging.info("event chance " + str(event_start_chance))
                        current_zrada_level -= peremoga_change
                        await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                        await message.answer(f"–†i–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –≤–ø–∞–≤ –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Äi—Å.",reply_markup=None)
                elif peremoga_event:
                    current_zrada_level -= peremoga_change * 2
                    await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                    await message.answer(f"–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏.\n–†—ñ–≤–µ–Ω—å –∑—Ä–∞–¥–∏ –ø–∞–¥–∞—î –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Ä—ñ—Å.",reply_markup=None)
                elif zrada_event:
                    current_zrada_level -= peremoga_change
                    await conn.execute("UPDATE zrada_level SET value = $1 WHERE id = 1", current_zrada_level)
                    await message.answer(f"–¢—Ä–∏–≤–∞—î —Ç–∏–∂–¥–µ–Ω—å –∑—Ä–∞–¥–∏. –ê–ª–µ —Ä—ñ–≤–µ–Ω—å —ó—ó –ø–æ–ø—Ä–∏ –≤—Å–µ –ø–∞–¥–∞—î –¥–æ {current_zrada_level}.\n–†i–≤–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏ –≤–∏—Ä—ñ—Å.",reply_markup=None)
            except Exception as e:
                await message.answer(text='–°–ø—Ä–æ–±—É–π —â–µ: ' + str(e),reply_markup=None)

    elif '—Å—Ç–∞—Å'  in cleaned_text:
        
        cleaned_message_text = re.sub(r'\b—Å—Ç–∞—Å\b', '', message.text, flags=re.IGNORECASE).strip()
        cleaned_message_text = re.sub(r"[-()\"#/@;:<>{}`+=~|.!,]", "", cleaned_message_text.lower()).strip()
        original_message = (
        message.reply_to_message.text if message.reply_to_message and message.reply_to_message.text 
        else "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."
        )
        try:
            embedding = generate_embedding(cleaned_message_text)
            similar_messages = await find_similar_messages(embedding, threshold=0.8)
            if similar_messages:
                similar_info = "\n".join([f"–ü–æ—Ö–æ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg[0]} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {msg[1]:.2f})" for msg in similar_messages])
            else:
                similar_info = "–ü–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            if len(cleaned_message_text) > 14  and '?' not in cleaned_message_text:
                await save_embedding(cleaned_message_text,embedding)
            else:
                pass
            chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "system", 
                    "content": system
                },
                {
                    "role": "user",
                    "content": "–ü–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "+ original_message,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                },
                {
                    "role": "user",
                    "content": similar_info,  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                },
                {
                    "role": "user",
                    "content":cleaned_message_text,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª
                }
            ],
            model="gpt-4o-mini",
            max_tokens=175
            )
            reply = chat_completion.choices[0].message.content
            await message.answer(reply,reply_markup=None)
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
    elif any(keyword in cleaned_text for keyword in random_keyword):
        await message.answer(random.choice(random_response),reply_markup=None)






    

    
   


    #peremoga
    
        








    # Respond based on the keyword found in the message
    # if 'hello' in message.text.lower():
    #     await message.answer("Greetings!")
    # elif 'bye' in message.text.lower():
    #     await message.answer("Farewell!")
    # elif 'help' in message.text.lower():
    #     await message.answer("How can I assist you?")





# @dp.message()
# async def echo_handler(message: Message) -> None:
#     """
#     Handler will forward receive a message back to the sender

#     By default, message handler will handle all message types (like a text, photo, sticker etc.)
#     """
#     print(message)
#     try:
        
#         # Send a copy of the received message
#         await message.send_copy(chat_id=message.chat.id)
#     except TypeError:
#         # But not all the types is supported to be copied so need to handle it
#         await message.answer("Nice try!")

dp.include_router(router)
async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())